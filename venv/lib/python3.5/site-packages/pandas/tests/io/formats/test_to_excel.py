"""Tests formatting as writer-agnostic ExcelCells

ExcelFormatter is tested implicitly in pandas/tests/io/test_excel.py
"""

import pytest

import pandas.util.testing as tm

from pandas.io.formats.css import CSSWarning
from pandas.io.formats.excel import CSSToExcelConverter


@pytest.mark.parametrize('css,expected', [
    # FONT
    # - name
    ('FONT-family: foo,bar', {'FONT': {'name': 'foo'}}),
    ('FONT-family: "foo bar",baz', {'FONT': {'name': 'foo bar'}}),
    ('FONT-family: foo,\nbar', {'FONT': {'name': 'foo'}}),
    ('FONT-family: foo, bar,    baz', {'FONT': {'name': 'foo'}}),
    ('FONT-family: bar, foo', {'FONT': {'name': 'bar'}}),
    ('FONT-family: \'foo bar\', baz', {'FONT': {'name': 'foo bar'}}),
    ('FONT-family: \'foo \\\'bar\', baz', {'FONT': {'name': 'foo \'bar'}}),
    ('FONT-family: "foo \\"bar", baz', {'FONT': {'name': 'foo "bar'}}),
    ('FONT-family: "foo ,bar", baz', {'FONT': {'name': 'foo ,bar'}}),
    # - family
    ('FONT-family: serif', {'FONT': {'name': 'serif', 'family': 1}}),
    ('FONT-family: Serif', {'FONT': {'name': 'serif', 'family': 1}}),
    ('FONT-family: roman, serif', {'FONT': {'name': 'roman', 'family': 1}}),
    ('FONT-family: roman, sans-serif', {'FONT': {'name': 'roman',
                                                 'family': 2}}),
    ('FONT-family: roman, sans serif', {'FONT': {'name': 'roman'}}),
    ('FONT-family: roman, sansserif', {'FONT': {'name': 'roman'}}),
    ('FONT-family: roman, cursive', {'FONT': {'name': 'roman', 'family': 4}}),
    ('FONT-family: roman, fantasy', {'FONT': {'name': 'roman', 'family': 5}}),
    # - size
    ('FONT-size: 1em', {'FONT': {'size': 12}}),
    ('FONT-size: xx-small', {'FONT': {'size': 6}}),
    ('FONT-size: x-small', {'FONT': {'size': 7.5}}),
    ('FONT-size: small', {'FONT': {'size': 9.6}}),
    ('FONT-size: medium', {'FONT': {'size': 12}}),
    ('FONT-size: large', {'FONT': {'size': 13.5}}),
    ('FONT-size: x-large', {'FONT': {'size': 18}}),
    ('FONT-size: xx-large', {'FONT': {'size': 24}}),
    ('FONT-size: 50%', {'FONT': {'size': 6}}),
    # - bold
    ('FONT-weight: 100', {'FONT': {'bold': False}}),
    ('FONT-weight: 200', {'FONT': {'bold': False}}),
    ('FONT-weight: 300', {'FONT': {'bold': False}}),
    ('FONT-weight: 400', {'FONT': {'bold': False}}),
    ('FONT-weight: normal', {'FONT': {'bold': False}}),
    ('FONT-weight: lighter', {'FONT': {'bold': False}}),
    ('FONT-weight: bold', {'FONT': {'bold': True}}),
    ('FONT-weight: bolder', {'FONT': {'bold': True}}),
    ('FONT-weight: 700', {'FONT': {'bold': True}}),
    ('FONT-weight: 800', {'FONT': {'bold': True}}),
    ('FONT-weight: 900', {'FONT': {'bold': True}}),
    # - italic
    ('FONT-style: italic', {'FONT': {'italic': True}}),
    ('FONT-style: oblique', {'FONT': {'italic': True}}),
    # - underline
    ('text-decoration: underline',
     {'FONT': {'underline': 'single'}}),
    ('text-decoration: overline',
     {}),
    ('text-decoration: none',
     {}),
    # - strike
    ('text-decoration: line-through',
     {'FONT': {'strike': True}}),
    ('text-decoration: underline line-through',
     {'FONT': {'strike': True, 'underline': 'single'}}),
    ('text-decoration: underline; text-decoration: line-through',
     {'FONT': {'strike': True}}),
    # - color
    ('color: red', {'FONT': {'color': 'FF0000'}}),
    ('color: #ff0000', {'FONT': {'color': 'FF0000'}}),
    ('color: #f0a', {'FONT': {'color': 'FF00AA'}}),
    # - shadow
    ('text-shadow: none', {'FONT': {'shadow': False}}),
    ('text-shadow: 0px -0em 0px #CCC', {'FONT': {'shadow': False}}),
    ('text-shadow: 0px -0em 0px #999', {'FONT': {'shadow': False}}),
    ('text-shadow: 0px -0em 0px', {'FONT': {'shadow': False}}),
    ('text-shadow: 2px -0em 0px #CCC', {'FONT': {'shadow': True}}),
    ('text-shadow: 0px -2em 0px #CCC', {'FONT': {'shadow': True}}),
    ('text-shadow: 0px -0em 2px #CCC', {'FONT': {'shadow': True}}),
    ('text-shadow: 0px -0em 2px', {'FONT': {'shadow': True}}),
    ('text-shadow: 0px -2em', {'FONT': {'shadow': True}}),

    # FILL
    # - color, fillType
    ('background-color: red', {'fill': {'fgColor': 'FF0000',
                                        'patternType': 'solid'}}),
    ('background-color: #ff0000', {'fill': {'fgColor': 'FF0000',
                                            'patternType': 'solid'}}),
    ('background-color: #f0a', {'fill': {'fgColor': 'FF00AA',
                                         'patternType': 'solid'}}),
    # BORDER
    # - style
    ('border-style: solid',
     {'border': {'top': {'style': 'medium'},
                 'bottom': {'style': 'medium'},
                 'left': {'style': 'medium'},
                 'right': {'style': 'medium'}}}),
    ('border-style: solid; border-width: thin',
     {'border': {'top': {'style': 'thin'},
                 'bottom': {'style': 'thin'},
                 'left': {'style': 'thin'},
                 'right': {'style': 'thin'}}}),

    ('border-top-style: solid; border-top-width: thin',
     {'border': {'top': {'style': 'thin'}}}),
    ('border-top-style: solid; border-top-width: 1pt',
     {'border': {'top': {'style': 'thin'}}}),
    ('border-top-style: solid',
     {'border': {'top': {'style': 'medium'}}}),
    ('border-top-style: solid; border-top-width: medium',
     {'border': {'top': {'style': 'medium'}}}),
    ('border-top-style: solid; border-top-width: 2pt',
     {'border': {'top': {'style': 'medium'}}}),
    ('border-top-style: solid; border-top-width: thick',
     {'border': {'top': {'style': 'thick'}}}),
    ('border-top-style: solid; border-top-width: 4pt',
     {'border': {'top': {'style': 'thick'}}}),

    ('border-top-style: dotted',
     {'border': {'top': {'style': 'mediumDashDotDot'}}}),
    ('border-top-style: dotted; border-top-width: thin',
     {'border': {'top': {'style': 'dotted'}}}),
    ('border-top-style: dashed',
     {'border': {'top': {'style': 'mediumDashed'}}}),
    ('border-top-style: dashed; border-top-width: thin',
     {'border': {'top': {'style': 'dashed'}}}),
    ('border-top-style: double',
     {'border': {'top': {'style': 'double'}}}),
    # - color
    ('border-style: solid; border-color: #0000ff',
     {'border': {'top': {'style': 'medium', 'color': '0000FF'},
                 'right': {'style': 'medium', 'color': '0000FF'},
                 'bottom': {'style': 'medium', 'color': '0000FF'},
                 'left': {'style': 'medium', 'color': '0000FF'}}}),
    ('border-top-style: double; border-top-color: blue',
     {'border': {'top': {'style': 'double', 'color': '0000FF'}}}),
    ('border-top-style: solid; border-top-color: #06c',
     {'border': {'top': {'style': 'medium', 'color': '0066CC'}}}),
    # ALIGNMENT
    # - horizontal
    ('text-align: center',
     {'alignment': {'horizontal': 'center'}}),
    ('text-align: left',
     {'alignment': {'horizontal': 'left'}}),
    ('text-align: right',
     {'alignment': {'horizontal': 'right'}}),
    ('text-align: justify',
     {'alignment': {'horizontal': 'justify'}}),
    # - vertical
    ('vertical-align: top',
     {'alignment': {'vertical': 'top'}}),
    ('vertical-align: text-top',
     {'alignment': {'vertical': 'top'}}),
    ('vertical-align: middle',
     {'alignment': {'vertical': 'center'}}),
    ('vertical-align: bottom',
     {'alignment': {'vertical': 'bottom'}}),
    ('vertical-align: text-bottom',
     {'alignment': {'vertical': 'bottom'}}),
    # - wrap_text
    ('white-space: nowrap',
     {'alignment': {'wrap_text': False}}),
    ('white-space: pre',
     {'alignment': {'wrap_text': False}}),
    ('white-space: pre-line',
     {'alignment': {'wrap_text': False}}),
    ('white-space: normal',
     {'alignment': {'wrap_text': True}}),
    # NUMBER FORMAT
    ('number-format: 0%',
     {'number_format': {'format_code': '0%'}}),
])
def test_css_to_excel(css, expected):
    convert = CSSToExcelConverter()
    assert expected == convert(css)


def test_css_to_excel_multiple():
    convert = CSSToExcelConverter()
    actual = convert('''
        FONT-weight: bold;
        text-decoration: underline;
        color: red;
        border-width: thin;
        text-align: center;
        vertical-align: top;
        unused: something;
    ''')
    assert {"FONT": {"bold": True, "underline": "single", "color": "FF0000"},
            "border": {"top": {"style": "thin"},
                       "right": {"style": "thin"},
                       "bottom": {"style": "thin"},
                       "left": {"style": "thin"}},
            "alignment": {"horizontal": "center",
                          "vertical": "top"}} == actual


@pytest.mark.parametrize('css,inherited,expected', [
    ('FONT-weight: bold', '',
     {'FONT': {'bold': True}}),
    ('', 'FONT-weight: bold',
     {'FONT': {'bold': True}}),
    ('FONT-weight: bold', 'FONT-style: italic',
     {'FONT': {'bold': True, 'italic': True}}),
    ('FONT-style: normal', 'FONT-style: italic',
     {'FONT': {'italic': False}}),
    ('FONT-style: inherit', '', {}),
    ('FONT-style: normal; FONT-style: inherit', 'FONT-style: italic',
     {'FONT': {'italic': True}}),
])
def test_css_to_excel_inherited(css, inherited, expected):
    convert = CSSToExcelConverter(inherited)
    assert expected == convert(css)


@pytest.mark.parametrize("input_color,output_color", (
    [(name, rgb) for name, rgb in CSSToExcelConverter.NAMED_COLORS.items()] +
    [("#" + rgb, rgb) for rgb in CSSToExcelConverter.NAMED_COLORS.values()] +
    [("#F0F", "FF00FF"), ("#ABC", "AABBCC")])
)
def test_css_to_excel_good_colors(input_color, output_color):
    # see gh-18392
    css = ("border-top-color: {color}; "
           "border-right-color: {color}; "
           "border-bottom-color: {color}; "
           "border-left-color: {color}; "
           "background-color: {color}; "
           "color: {color}").format(color=input_color)

    expected = dict()

    expected["fill"] = {
        "patternType": "solid",
        "fgColor": output_color
    }

    expected["FONT"] = {
        "color": output_color
    }

    expected["border"] = {
        k: {
            "color": output_color,
        } for k in ("top", "right", "bottom", "left")
    }

    with tm.assert_produces_warning(None):
        convert = CSSToExcelConverter()
        assert expected == convert(css)


@pytest.mark.parametrize("input_color", [None, "not-a-color"])
def test_css_to_excel_bad_colors(input_color):
    # see gh-18392
    css = ("border-top-color: {color}; "
           "border-right-color: {color}; "
           "border-bottom-color: {color}; "
           "border-left-color: {color}; "
           "background-color: {color}; "
           "color: {color}").format(color=input_color)

    expected = dict()

    if input_color is not None:
        expected["fill"] = {
            "patternType": "solid"
        }

    with tm.assert_produces_warning(CSSWarning):
        convert = CSSToExcelConverter()
        assert expected == convert(css)
